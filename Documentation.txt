Comprehensive Documentation: Building AutoBalancer from Scratch
===============================================================

This guide will walk you through the process of building the `AutoBalancer` application from the ground up. It's designed to help you understand the *why* behind each step, common problems you might encounter, and how to approach solutions independently. By following this, you'll gain a deeper understanding of application structure, design patterns, and debugging.

---

Part 1: Project Setup and Initial UI (Laying the Foundation)
-----------------------------------------------------------

This phase focuses on setting up your development environment, creating the basic project, and designing the initial user interface. We'll also introduce a third-party control and learn how to integrate it effectively.

### Step 1: Create a New Visual Basic .NET Project

This is where your application begins. Choosing the right project type and setting up the environment correctly is crucial.

1.  **Open Visual Studio:** Launch your Visual Studio IDE.
2.  **Create a New Project:**
    *   From the start window, select "Create a new project".
    *   In the search bar, type "Windows Forms App (.NET Framework)".
    *   Select the template for **"Windows Forms App (.NET Framework)"** for Visual Basic. (Ensure it's the .NET Framework version, not .NET Core/5/6/7/8, as `DevComponents.DotNetBar2` typically targets .NET Framework).
    *   Click "Next".
3.  **Configure Your Project:**
    *   **Project Name:** Enter `AutoBalancer`. This will be the name of your main executable and the root namespace for your project.
    *   **Location:** Choose a suitable directory where you want to save your project (e.g., `C:\Users\AJ\source\repos\AutoBalancer`).
    *   **Solution Name:** Visual Studio will usually default this to the project name, which is fine.
    *   **Framework:** Select `.NET Framework 4.6.1` (or a version compatible with your `DevComponents.DotNetBar2` library, if you know it. If unsure, 4.6.1 is a common and stable choice).
    *   Click "Create".

**_Why this choice?_**
*   **Windows Forms App (.NET Framework):** This is the traditional framework for desktop applications on Windows. It's well-suited for applications that require a rich graphical user interface and direct interaction with the operating system.
*   **Project Name `AutoBalancer`:** A descriptive name helps identify the project's purpose. It also becomes your default root namespace, which is important for organizing your code.
*   **Target Framework:** Compatibility is key. Third-party libraries are often built for specific .NET Framework versions. Mismatches can lead to runtime errors or compilation issues.

### Step 2: Initial UI Design - `frmMain`

Visual Studio automatically creates a default form (`Form1.vb`). We'll rename it and start adding basic UI elements.

1.  **Rename `Form1.vb` to `frmMain.vb`:**
    *   In the "Solution Explorer" window (usually on the right), locate `Form1.vb`.
    *   Right-click on `Form1.vb` and select "Rename".
    *   Type `frmMain.vb` and press Enter.
    *   Visual Studio will ask: "You are renaming a file that contains a class definition. Would you like to also perform a rename in this project of all references to the code element 'Form1'?" **Click "Yes".**
        *   **_Why "Yes"?_** This ensures that all code references (like `Public Class Form1` and `My.MyApplication.MainForm = New Form1`) are updated to `frmMain`, preventing compilation errors.
2.  **Open `frmMain.vb` in Designer:** Double-click `frmMain.vb` in Solution Explorer to open its visual designer.
3.  **Set Form Properties:**
    *   Select the form by clicking on its title bar.
    *   In the "Properties" window (usually bottom-right):
        *   Change `Text` property to `Auto Balancer`. This is the text that appears in the form's title bar.
        *   (Optional) Adjust `Size` or `StartPosition` as desired.
4.  **Add Standard UI Controls:**
    *   From the "Toolbox" (usually on the left), drag and drop the following controls onto your `frmMain`:
        *   **`TextBox`:**
            *   Name: `textboxSearch`
            *   Location: `12, 24`
            *   Size: `231, 20`
            *   ReadOnly: `True` (This textbox will display the selected file path, not allow direct editing).
        *   **`Button`:**
            *   Name: `btnSearch`
            *   Text: `....` (This button will open the file dialog).
            *   Location: `249, 22`
            *   Size: `30, 23`
        *   **`Label`:**
            *   Name: `labelStatus`
            *   Text: `Status:`
            *   Font: `Microsoft Sans Serif, 11pt, Bold`
            *   Location: `12, 56`
        *   **`Label`:**
            *   Name: `labelConnected`
            *   Text: `Not Connected`
            *   Font: `Microsoft Sans Serif, 11pt`
            *   Location: `69, 56`
        *   **`Button`:**
            *   Name: `btn`
            *   Text: `View Logs`
            *   Location: `11, 124`
            *   Size: `126, 23`
        *   **`Button`:**
            *   Name: `btnViewLogs`
            *   Text: `Open Backup Folder`
            *   Location: `144, 124`
            *   Size: `134, 23`

**_Understanding `frmMain.Designer.vb`_**
*   When you add controls in the designer, Visual Studio automatically generates code in `frmMain.Designer.vb`. This file defines the layout and initial properties of your UI elements.
*   **Crucial Rule:** **NEVER edit `frmMain.Designer.vb` directly.** Any changes you make there will likely be overwritten by the designer. Always use the visual designer or the Properties window to modify UI elements. If you need to change something programmatically, do it in `frmMain.vb`.

### Step 3: Integrate `DevComponents.DotNetBar2`

This step involves adding a third-party UI component library to your project.

1.  **Add Reference to `DevComponents.DotNetBar2.dll`:**
    *   In "Solution Explorer", right-click on your project (`AutoBalancer`) -> "Add" -> "Reference...".
    *   In the "Reference Manager" dialog, go to the "Browse" tab.
    *   Click the "Browse..." button.
    *   Navigate to the location where you have the `DevComponents.DotNetBar2.dll` file. (This is typically provided by the DotNetBar installation or downloaded separately).
    *   Select `DevComponents.DotNetBar2.dll` and click "Add", then "OK".
2.  **Add `ToolStrip` and `ProgressBarX` to `frmMain`:**
    *   Go back to the `frmMain` designer.
    *   From the "Toolbox", you should now see new controls under a category like "DotNetBar Controls".
    *   Drag a **`ToolStrip`** control onto your form.
        *   Name: `tsContainer`
        *   Dock: `Bottom` (This will place it at the bottom of the form).
        *   Click the small arrow on the `tsContainer` to open its smart tag.
        *   Add a `ToolStripButton` (Name: `tsProcess`, Text: `Run Auto Balance`).
        *   Add a `ToolStripSeparator` (Name: `ToolStripSeparator1`).
        *   Add another `ToolStripButton` (Name: `tsClose`, Text: `Close`).
    *   Drag a **`ProgressBarX`** control onto your form.
        *   Name: `ProgressBarX1`
        *   Location: `11, 82` (Adjust if needed to be below `labelStatus`).
        *   Size: `267, 23`

**_Problem-Solving: `HintPath` Issue_**
*   **Symptom:** After adding the reference, your project might build fine on your machine, but fail on another developer's machine or a build server with errors like "The reference 'DevComponents.DotNetBar2' could not be resolved because it was not found at the path 'C:\Users\YourName\Downloads\DotNetBar\...\DevComponents.DotNetBar2.dll'".
*   **Reason:** Visual Studio, by default, adds a `<HintPath>` to the `.vbproj` file pointing to the *exact* location where you added the DLL. This path is specific to your machine.
*   **Solution:**
    1.  In "Solution Explorer", right-click on your project (`AutoBalancer`) -> "Unload Project".
    2.  Right-click on the unloaded project -> "Edit AutoBalancer.vbproj".
    3.  Find the `<Reference Include="DevComponents.DotNetBar2">` entry. It will look something like this:
        ```xml
        <Reference Include="DevComponents.DotNetBar2">
          <HintPath>C:\Users\YourName\Downloads\DotNetBar\DotNetBar\Bin\DevComponents.DotNetBar2.dll</HintPath>
        </Reference>
        ```
    4.  **Delete the entire `<HintPath>...</HintPath>` line.**
    5.  The entry should now look like this:
        ```xml
        <Reference Include="DevComponents.DotNetBar2" />
        ```
    6.  Save and close the `.vbproj` file.
    7.  Right-click on the project -> "Reload Project".
    *   **_Why this works:_** Removing the `HintPath` tells MSBuild to look for the DLL in standard locations (like the GAC, or in a `lib` folder if you're using NuGet or a similar package manager). For simplicity in this guide, we assume it will be found in the build output directory or GAC.

### Step 4: Create a Custom `ProgressBarX` for Text Display

The standard `ProgressBarX` from DotNetBar doesn't directly support displaying text *on* the bar itself. We'll create a custom control to add this functionality.

1.  **Create `CustomProgressBarX.vb`:**
    *   In "Solution Explorer", right-click on your project (`AutoBalancer`) -> "Add" -> "Class...".
    *   Name the class file `CustomProgressBarX.vb`.
    *   Click "Add".
2.  **Add Code to `CustomProgressBarX.vb`:**
    *   Paste the following code into `CustomProgressBarX.vb`. This class inherits from `ProgressBarX` and overrides the `OnPaint` method to draw custom text.
        ```vb.net
        Imports System.Drawing
        Imports System.Windows.Forms
        Imports DevComponents.DotNetBar.Controls ' Important: Import the base control's namespace

        Public Class CustomProgressBarX
            Inherits ProgressBarX

            ' A custom property to hold the text we want to display
            Public Property CustomText As String = ""

            ' Constructor to enable custom painting
            Public Sub New()
                ' These styles tell Windows Forms that we will handle the painting ourselves
                SetStyle(ControlStyles.UserPaint Or ControlStyles.AllPaintingInWmPaint Or ControlStyles.OptimizedDoubleBuffer, True)
            End Sub

            ' Override the OnPaint method to draw our custom text
            Protected Overrides Sub OnPaint(e As PaintEventArgs)
                ' Call the base class OnPaint to draw the standard progress bar background and fill
                MyBase.OnPaint(e)

                ' Only draw text if CustomText is not empty
                If Not String.IsNullOrEmpty(CustomText) Then
                    Dim g As Graphics = e.Graphics ' Get the Graphics object for drawing
                    Dim rect As Rectangle = ClientRectangle ' Get the bounds of the control

                    ' Set up text formatting (center the text horizontally and vertically)
                    Using sf As New StringFormat() With {
                        .Alignment = StringAlignment.Center,
                        .LineAlignment = StringAlignment.Center
                    }
                        ' Use the control's ForeColor for the text color
                        Using textBrush As New SolidBrush(ForeColor)
                            ' Draw the custom text onto the progress bar
                            g.DrawString(CustomText, Font, textBrush, rect, sf)
                        End Using
                    End Using
                End If
            End Sub
        End Class
        ```
    *   **_Why `OnPaint`?_** The `OnPaint` method is part of the Windows Forms drawing cycle. By overriding it, you gain control over how the control renders itself. `MyBase.OnPaint(e)` ensures the original `ProgressBarX` drawing (the bar itself) still happens, and then we draw our text *on top* of it.
    *   **_Why `CustomText` property?_** We need a way to pass the text to be displayed from our form's code to this custom control. A public property is the standard way to do this.

3.  **Modify `frmMain.Designer.vb` to use `CustomProgressBarX`:**
    *   In "Solution Explorer", click the small arrow next to `frmMain.vb` to expand it.
    *   Double-click `frmMain.Designer.vb` to open it in the code editor.
    *   **Add `Imports AutoBalancer`:** At the very top of the file, add this line. This tells the designer file where to find your `CustomProgressBarX` class.
        ```vb.net
        Imports AutoBalancer ' Add this line
        <Global.Microsoft.VisualBasic.CompilerServices.DesignerGenerated()>
        Partial Class frmMain
            ' ... rest of the file ...
        ```
    *   **Change Declaration:** Find the line declaring `ProgressBarX1` and change its type:
        ```vb.net
        ' BEFORE:
        Friend WithEvents ProgressBarX1 As DevComponents.DotNetBar.Controls.ProgressBarX
        ' AFTER:
        Friend WithEvents ProgressBarX1 As CustomProgressBarX
        ```
    *   **Change Initialization:** Find the line initializing `ProgressBarX1` and change its constructor call:
        ```vb.net
        ' BEFORE:
        Me.ProgressBarX1 = New DevComponents.DotNetBar.Controls.ProgressBarX()
        ' AFTER:
        Me.ProgressBarX1 = New CustomProgressBarX()
        ```
    *   **Remove Default Text Property:** Find and delete the line that sets the default text:
        ```vb.net
        ' DELETE THIS LINE:
        Me.ProgressBarX1.Text = "ProgressBarX1"
        ```
    *   Save `frmMain.Designer.vb`.
    *   **_Why manual edit?_** Sometimes, the Visual Studio designer doesn't automatically pick up custom controls correctly, or it might revert changes. Manual editing of the designer file is occasionally necessary for custom controls, especially when inheriting from third-party components.

**_Problem-Solving: `Type 'CustomProgressBarX' is not defined`_**
*   **Symptom:** You get this error during compilation, even after adding the `CustomProgressBarX.vb` file.
*   **Reason 1 (Missing `Imports`):** The `frmMain.Designer.vb` file doesn't know where to find `CustomProgressBarX`.
    *   **Fix:** Ensure `Imports AutoBalancer` is at the top of `frmMain.Designer.vb`.
*   **Reason 2 (Missing `<Compile>` entry in `.vbproj`):** The `CustomProgressBarX.vb` file might not be included in the project's build process.
    *   **Fix:**
        1.  In "Solution Explorer", right-click on your project (`AutoBalancer`) -> "Unload Project".
        2.  Right-click on the unloaded project -> "Edit AutoBalancer.vbproj".
        3.  Locate the `<ItemGroup>` containing `<Compile Include="..." />` entries.
        4.  Add `<Compile Include="CustomProgressBarX.vb" />` within this `ItemGroup`.
        5.  Save and close the `.vbproj` file.
        6.  Right-click on the project -> "Reload Project".
*   **Reason 3 (Incorrect Namespace):** If `CustomProgressBarX` was defined within a different namespace (e.g., `Namespace MyControls`), then the `Imports` statement in `frmMain.Designer.vb` would need to match (e.g., `Imports MyControls`). For this guide, we assume it's in the root `AutoBalancer` namespace.

---

Part 2: Structuring the Application (Separation of Concerns)
-----------------------------------------------------------

This phase focuses on organizing your code into logical folders and classes, adhering to principles like Separation of Concerns and Single Responsibility.

### Step 5: Create Folder Structure

A well-organized project is easier to understand, maintain, and scale.

1.  **Create Folders:**
    *   In "Solution Explorer", right-click on your project (`AutoBalancer`) -> "Add" -> "New Folder".
    *   Create the following folders:
        *   `Models`
        *   `Backup`
        *   `Logs`
        *   `Modules`

**_Why separate folders?_**
*   **Organization:** Groups related files together, making the project easier to navigate.
*   **Maintainability:** Changes to one area (e.g., logging) are less likely to impact unrelated areas.
*   **Logical Grouping:** Each folder represents a distinct concern of the application.
    *   `Models`: Data structures.
    *   `Backup`: Backup-related operations.
    *   `Logs`: Logging functionality.
    *   `Modules`: Core business logic and helper functions.

### Step 6: Define Model Classes

Model classes are blueprints for the data your application works with. They define the properties (attributes) of your business entities.

1.  **Create Model Classes:**
    *   In "Solution Explorer", right-click on the `Models` folder -> "Add" -> "Class...".
    *   Create three new class files: `ControlNo.vb`, `PostTrans.vb`, `Transpay.vb`.
2.  **Add Code to Model Classes:**
    *   **`ControlNo.vb`:**
        ```vb.net
        Namespace Models ' Important: Wrap your class in a Namespace
            Public Class ControlNo
                Public Property Control_No As String
                Public Property Audit As String
            End Class
        End Namespace
        ```
    *   **`PostTrans.vb`:**
        ```vb.net
        Namespace Models ' Important: Wrap your class in a Namespace
            Public Class PostTrans
                Public Property posttrans_id As Integer
                Public Property Control_No As String
                Public Property TransactionNo As String
                Public Property InvoiceNo As String
                Public Property Amount As Decimal
                Public Property Audit As String
            End Class
        End Namespace
        ```
    *   **`Transpay.vb`:**
        ```vb.net
        Namespace Models ' Important: Wrap your class in a Namespace
            Public Class Transpay
                Public Property transpay_id As Integer
                Public Property Control_No As String
                Public Property TransactionNo As String
                Public Property Amount As Decimal
                Public Property Audit As String
            End Class
        End Namespace
        ```
    *   **_Why `Namespace Models`?_** Namespaces help prevent naming conflicts and logically group related classes. By putting your model classes in `AutoBalancer.Models`, you can refer to them as `Models.ControlNo` (or just `ControlNo` if you add an `Imports Models` statement).
    *   **_Why `Public Property`?_** This is the standard way to define properties in VB.NET. It creates a "getter" and "setter" for the field, allowing other parts of your code to read and write its value.

**_Problem-Solving: `Type 'Models.ControlNo' is not defined`_**
*   **Symptom:** You get this error when trying to use `Models.ControlNo` (or `ControlNo`) in other parts of your code.
*   **Reason:** The class is not correctly defined within the `Models` namespace, or the namespace is not imported where it's being used.
*   **Fix:**
    1.  Ensure your model classes are wrapped in `Namespace Models ... End Namespace` blocks as shown above.
    2.  Ensure any file that uses these models has `Imports AutoBalancer.Models` at the top.

### Step 7: Create Helper Classes (Placeholders)

These classes will encapsulate specific functionalities, making your code modular and easier to manage. Initially, they will contain placeholder methods.

1.  **Create `BackupService.vb`:**
    *   In "Solution Explorer", right-click on the `Backup` folder -> "Add" -> "Class...".
    *   Name the class file `BackupService.vb`.
    *   Add the following code:
        ```vb.net
        Namespace Backup
            Public Class BackupService
                Public Shared Function CreateBackup(sourceDbPath As String) As String
                    ' Placeholder for backup creation logic
                    System.Threading.Thread.Sleep(1000) ' Simulate work
                    Return "" ' Return an empty string for now
                End Function
            End Class
        End Namespace
        ```
2.  **Create `Logger.vb`:**
    *   In "Solution Explorer", right-click on the `Logs` folder -> "Add" -> "Class...".
    *   Name the class file `Logger.vb`.
    *   Add the following code:
        ```vb.net
        Namespace Logs
            Public Class Logger
                ' Public Shared ReadOnly property to expose the log folder path
                Public Shared ReadOnly LogFolderPath As String = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Logs")

                Private Shared Sub EnsureLogFolderExists()
                    If Not System.IO.Directory.Exists(LogFolderPath) Then
                        System.IO.Directory.CreateDirectory(LogFolderPath)
                    End If
                End Sub

                Public Shared Sub LogProgress(message As String)
                    ' Placeholder for logging progress
                    System.Diagnostics.Debug.WriteLine("Progress: " & message)
                End Sub

                Public Shared Sub LogError(message As String, Optional ex As Exception = Nothing)
                    ' Placeholder for logging errors
                    System.Diagnostics.Debug.WriteLine("Error: " & message)
                End Sub
            End Class
        End Namespace
        ```
3.  **Create `DatabaseHelper.vb`:**
    *   In "Solution Explorer", right-click on the `Modules` folder -> "Add" -> "Class...".
    *   Name the class file `DatabaseHelper.vb`.
    *   Add the following code:
        ```vb.net
        Imports System.Data.OleDb
        Imports AutoBalancer.Models ' Import your Models namespace

        Namespace Modules
            Public Class DatabaseHelper
                Public Shared Function OpenDatabase(dbPath As String) As OleDbConnection
                    ' Placeholder for opening database connection
                    Return Nothing
                End Function

                Public Shared Function ReadControlNo(connection As OleDbConnection) As List(Of Models.ControlNo)
                    ' Placeholder for reading ControlNo data
                    Return New List(Of Models.ControlNo)
                End Function

                Public Shared Function ReadPostTrans(connection As OleDbConnection) As List(Of Models.PostTrans)
                    ' Placeholder for reading PostTrans data
                    Return New List(Of Models.PostTrans)
                End Function

                Public Shared Function ReadTranspay(connection As OleDbConnection) As List(Of Models.Transpay)
                    ' Placeholder for reading TransPay data
                    Return New List(Of Models.Transpay)
                End Function

                Public Shared Function ScanForMismatches(postTransList As List(Of Models.PostTrans), transpayList As List(Of Models.Transpay), controlNoList As List(Of Models.ControlNo)) As List(Of String)
                    ' Placeholder for scanning mismatches
                    Return New List(Of String)
                End Function
            End Class
        End Namespace
        ```
4.  **Create `SequenceHelper.vb`:**
    *   In "Solution Explorer", right-click on the `Modules` folder -> "Add" -> "Class...".
    *   Name the class file `SequenceHelper.vb`.
    *   Add the following code:
        ```vb.net
        Imports System.Collections.Generic
        Imports System.Linq
        Imports System.Data.OleDb
        Imports AutoBalancer.Models ' Import your Models namespace

        Namespace Modules
            Public Class SequenceHelper
                Public Shared Function CollectSequences(connection As OleDbConnection) As Tuple(Of List(Of Integer), List(Of Integer), List(Of String))
                    ' Placeholder for collecting sequences
                    Return New Tuple(Of List(Of Integer), List(Of Integer), List(Of String))(New List(Of Integer), New List(Of Integer), New List(Of String))
                End Function

                Public Shared Function DetectGaps(postTransList As List(Of Models.PostTrans), transpayList As List(Of Models.Transpay), controlNoList As List(Of Models.ControlNo)) As List(Of String)
                    ' Placeholder for detecting gaps
                    Return New List(Of String)
                End Function

                Public Shared Sub CorrectGaps(connection As OleDbConnection, gaps As List(Of String))
                    ' Placeholder for correcting gaps
                End Sub

                Public Shared Sub RenumberForContinuity(connection As OleDbConnection, auditAware As Boolean)
                    ' Placeholder for renumbering
                End Sub

                Public Shared Function VerifySequences(connection As OleDbConnection) As List(Of String)
                    ' Placeholder for verification
                    Return New List(Of String)
                End Function
            End Class
        End Namespace
        ```
5.  **Create `ValidationHelper.vb`:**
    *   In "Solution Explorer", right-click on the `Modules` folder -> "Add" -> "Class...".
    *   Name the class file `ValidationHelper.vb`.
    *   Add the following code:
        ```vb.net
        Imports System.Collections.Generic
        Imports System.Linq
        Imports AutoBalancer.Models ' Import your Models namespace

        Namespace Modules
            Public Class ValidationHelper
                Public Shared Function CheckPostTransBalance(postTrans As Models.PostTrans, transpayList As List(Of Models.Transpay)) As Boolean
                    ' Placeholder for checking PostTrans balance
                    Return True
                End Function

                Public Shared Function CheckPostTransTransPayMismatch(postTrans As Models.PostTrans, transpay As Models.Transpay) As Boolean
                    ' Placeholder for checking PostTrans/Transpay mismatch
                    Return False
                End Function

                Public Shared Function CheckTransPayBalance(transpay As Models.Transpay, postTransList As List(Of Models.PostTrans)) As Boolean
                    ' Placeholder for checking Transpay balance
                    Return True
                End Function

                Public Shared Function CheckInvoiceTransactionNo(postTrans As Models.PostTrans) As Boolean
                    ' Placeholder for checking InvoiceNo vs TransactionNo
                    Return True
                End Function

                Public Shared Sub ValidateControlNo()
                    ' Placeholder for validating ControlNo
                End Sub
            End Class
        End Namespace
        ```

**_Problem-Solving: Helper Class Not Found_**
*   **Symptom:** You get errors like "Type 'BackupService' is not defined" or "Namespace or type specified in the Imports 'AutoBalancer.Models' doesn't contain any public member or cannot be found."
*   **Reason 1 (Missing `<Compile>` entry in `.vbproj`):** Visual Studio sometimes doesn't automatically add new files to the project's build list, especially if you add them outside the IDE or if there's a glitch.
    *   **Fix:**
        1.  In "Solution Explorer", right-click on your project (`AutoBalancer`) -> "Unload Project".
        2.  Right-click on the unloaded project -> "Edit AutoBalancer.vbproj".
        3.  Locate the `<ItemGroup>` containing `<Compile Include="..." />` entries.
        4.  Ensure all your new `.vb` files (e.g., `Backup\BackupService.vb`, `Logs\Logger.vb`, `Modules\DatabaseHelper.vb`, etc.) have a corresponding `<Compile Include="..." />` entry.
        5.  Save and close the `.vbproj` file.
        6.  Right-click on the project -> "Reload Project".
*   **Reason 2 (Missing `Imports` statement):** The file trying to use the helper class doesn't know its namespace.
    *   **Fix:** Ensure the correct `Imports` statement is at the top of the file (e.g., `Imports AutoBalancer.Backup` for `BackupService`).

### Step 8: Build the Project (First Checkpoint)

Before proceeding, it's a good practice to build your project to catch any syntax errors or missing references early.

1.  **Build Solution:** In Visual Studio, go to "Build" -> "Build Solution".
2.  **Resolve Errors:** If you encounter any errors, carefully read the "Error List" window. Common errors at this stage might include:
    *   "Type is not defined": Check `Imports` statements and `<Compile>` entries in `.vbproj`.
    *   "Namespace or type specified in the Imports ... doesn't contain any public member": Check if the class is `Public` and correctly wrapped in its `Namespace`.

---

Part 3: Implementing Core Functionality (Logic by Logic)
-------------------------------------------------------

This phase focuses on connecting your UI to the helper classes and implementing the actual business logic.

### Step 9: Update `frmMain.vb` with Core Logic

This is where the UI interacts with your newly structured backend.

1.  **Update `frmMain.vb` Imports:**
    *   Open `frmMain.vb` in the code editor.
    *   Add the following `Imports` statements at the top of the file. These tell `frmMain` where to find your helper classes and other necessary components.
        ```vb.net
        Imports System.Diagnostics ' For Process.Start
        Imports System.IO          ' For Path.Combine, File.Exists
        Imports System.Windows.Forms ' Already there, but good to note
        Imports AutoBalancer.Backup
        Imports AutoBalancer.Logs
        Imports AutoBalancer.Modules
        ' Ensure System and System.Collections.Generic are also imported if not already
        Imports System
        Imports System.Collections.Generic
        Imports System.Linq ' For .Any() and .First()
        ```
2.  **Implement `btnSearch_Click` (Database File Selection):**
    *   This method will open a file dialog, allowing the user to select their MS Access database.
    ```vb.net
    Private Sub btnSearch_Click(sender As Object, e As EventArgs) Handles btnSearch.Click
        Using openFileDialog As New OpenFileDialog()
            ' Set the filter to show only Access database files
            openFileDialog.Filter = "Access Databases (*.mdb;*.accdb)|*.mdb;*.accdb|All files (*.*)|*.*"
            openFileDialog.Title = "Select MS Access Database"

            ' Show the dialog and check if the user clicked OK
            If openFileDialog.ShowDialog() = DialogResult.OK Then
                ' Display the selected file path in the textbox
                textboxSearch.Text = openFileDialog.FileName
            End If
        End Using
    End Sub
    ```
    *   **_Why `OpenFileDialog`?_** This is a standard Windows Forms control for allowing users to select files from their system.
    *   **_Why `Filter`?_** It guides the user to select the correct file type and prevents them from accidentally selecting an incompatible file.
    *   **_Why `textboxSearch.Text = openFileDialog.FileName`?_** This updates the UI to show the user which file they have selected.

3.  **Implement `tsProcess_Click` (The Main Auto Balance Process):**
    *   This is the heart of your application's logic flow. It orchestrates calls to your helper classes.
    *   **_Problem-Solving: `UpdateProgressBar` not declared_**
        *   **Symptom:** You get errors like "UpdateProgressBar is not declared" when trying to call it from `tsProcess_Click`.
        *   **Reason:** If `UpdateProgressBar` was defined *inside* `tsProcess_Click`, it would be a local method, inaccessible from outside that specific event handler. It needs to be a method of the `frmMain` class itself.
        *   **Fix:** Ensure `UpdateProgressBar` is defined as a `Private Sub` directly within the `Public Class frmMain ... End Class` block, but *outside* of any other `Sub` or `Function`.
    ```vb.net
    Private Sub tsProcess_Click(sender As Object, e As EventArgs) Handles tsProcess.Click
        ' UI Feedback: Change button text and initialize progress bar
        tsProcess.Text = "Processing..."
        ProgressBarX1.Value = 0
        ProgressBarX1.CustomText = "Starting..."
        Application.DoEvents() ' Keep UI responsive during initialization

        Dim dbPath As String = textboxSearch.Text
        ' Input Validation: Check if a database file is selected and exists
        If String.IsNullOrEmpty(dbPath) OrElse Not System.IO.File.Exists(dbPath) Then
            MessageBox.Show("Please select a valid MS Access database file.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
            tsProcess.Text = "Run Auto Balance" ' Revert button text
            ProgressBarX1.CustomText = "Error!" ' Show error on progress bar
            Return ' Exit the subroutine
        End If

        Dim connection As System.Data.OleDb.OleDbConnection = Nothing ' Declare connection outside Try block for Finally access

        Try
            ' Step 1: Creating Backup...
            Logs.Logger.LogProgress("Creating Backup...")
            Dim backupFilePath As String = Backup.BackupService.CreateBackup(dbPath) ' Call BackupService
            Logs.Logger.LogProgress("Backup created at: " & backupFilePath)
            UpdateProgressBar(10, "Creating Backup...")

            ' Step 2: Open Database Connection
            Logs.Logger.LogProgress("Opening database connection...")
            connection = Modules.DatabaseHelper.OpenDatabase(dbPath) ' Call DatabaseHelper
            Logs.Logger.LogProgress("Database connection opened.")
            labelConnected.Text = "Connected" ' Update UI status
            UpdateProgressBar(20, "Reading Data...")

            ' Step 3: Read Data from Tables
            Logs.Logger.LogProgress("Reading ControlNo data...")
            Dim controlNoList As List(Of Models.ControlNo) = Modules.DatabaseHelper.ReadControlNo(connection)
            Logs.Logger.LogProgress("Reading PostTrans data...")
            Dim postTransList As List(Of Models.PostTrans) = Modules.DatabaseHelper.ReadPostTrans(connection)
            Logs.Logger.LogProgress("Reading TransPay data...")
            Dim transpayList As List(Of Models.Transpay) = Modules.DatabaseHelper.ReadTranspay(connection)
            UpdateProgressBar(40, "Scanning for Mismatches...")

            ' Step 4: Scan for Mismatches (using DatabaseHelper)
            Logs.Logger.LogProgress("Scanning for mismatches...")
            Dim mismatches As List(Of String) = Modules.DatabaseHelper.ScanForMismatches(postTransList, transpayList, controlNoList)
            If mismatches.Any() Then
                Logs.Logger.LogProgress("Detected " & mismatches.Count.ToString() & " mismatches.")
                For Each mismatch As String In mismatches
                    Logs.Logger.LogProgress("- " & mismatch)
                Next
            Else
                Logs.Logger.LogProgress("No mismatches detected.")
            End If
            UpdateProgressBar(60, "Handling Sequences...")

            ' Step 5: Sequence Handling (using SequenceHelper)
            Logs.Logger.LogProgress("Collecting sequences...")
            Dim sequences = Modules.SequenceHelper.CollectSequences(connection)
            Logs.Logger.LogProgress("Detecting gaps...")
            Dim detectedGaps As List(Of String) = Modules.SequenceHelper.DetectGaps(postTransList, transpayList, controlNoList) ' Placeholder call
            If detectedGaps.Any() Then
                Logs.Logger.LogProgress("Detected " & detectedGaps.Count.ToString() & " gaps.")
                For Each gap As String In detectedGaps
                    Logs.Logger.LogProgress("- " & gap)
                Next
                Logs.Logger.LogProgress("Correcting gaps...")
                Modules.SequenceHelper.CorrectGaps(connection, detectedGaps) ' Placeholder call
            Else
                Logs.Logger.LogProgress("No gaps detected.")
            End If
            Logs.Logger.LogProgress("Renumbering for continuity...")
            Modules.SequenceHelper.RenumberForContinuity(connection, False) ' Placeholder call (auditAware is False for now)
            Logs.Logger.LogProgress("Verifying sequences...")
            Dim verificationMismatches As List(Of String) = Modules.SequenceHelper.VerifySequences(connection) ' Placeholder call
            If verificationMismatches.Any() Then
                Logs.Logger.LogProgress("Sequence verification found " & verificationMismatches.Count.ToString() & " issues.")
                For Each vm As String In verificationMismatches
                    Logs.Logger.LogProgress("- " & vm)
                Next
            Else
                Logs.Logger.LogProgress("Sequence verification passed.")
            End If
            UpdateProgressBar(80, "Applying Balancing Rules...")

            ' Step 6: Apply Balancing Rules (using ValidationHelper)
            Logs.Logger.LogProgress("Applying balancing rules...")
            ' Example: Check a PostTrans balance (using ValidationHelper)
            If postTransList.Any() Then
                Dim firstPostTrans As Models.PostTrans = postTransList.First()
                If Not Modules.ValidationHelper.CheckPostTransBalance(firstPostTrans, transpayList) Then
                    Logs.Logger.LogProgress("PostTrans " & firstPostTrans.posttrans_id.ToString() & " is not balanced.")
                    ' Implement correction logic here
                End If
            End If
            UpdateProgressBar(90, "Finalizing...")

            ' Step 7: Save Results (Placeholder)
            Logs.Logger.LogProgress("Saving fixed MDB...")
            ' This would involve writing updated data back to the database
            ' For now, just simulate
            System.Threading.Thread.Sleep(1000)
            UpdateProgressBar(100, "Completed!")

            ProgressBarX1.CustomText = "Done!"
            Logs.Logger.LogProgress("Auto Balance process completed successfully.")
            MessageBox.Show("Auto Balance process completed successfully! Check logs for details.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information)

        Catch ex As Exception
            ' Error Handling: Log and display error
            ProgressBarX1.CustomText = "Error!"
            Logs.Logger.LogError("Auto Balance process failed: " & ex.Message, ex)
            MessageBox.Show("An error occurred during the Auto Balance process: " & ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
            labelConnected.Text = "Not Connected" ' Update UI status on error
        Finally
            ' Ensure database connection is closed and UI is reset
            If connection IsNot Nothing AndAlso connection.State = ConnectionState.Open Then
                connection.Close()
                Logs.Logger.LogProgress("Database connection closed.")
            End If
            labelConnected.Text = "Not Connected" ' Revert UI status
            tsProcess.Text = "Run Auto Balance" ' Revert button text
        End Try
    End Sub

    ' Helper method for updating the progress bar
    Private Sub UpdateProgressBar(value As Integer, text As String)
        ProgressBarX1.Value = value
        ProgressBarX1.CustomText = text & " " & value.ToString() & "%"
        Application.DoEvents() ' Crucial for keeping the UI responsive
        System.Threading.Thread.Sleep(50) ' Small delay to make progress visible
    End Sub

    Private Sub tsClose_Click(sender As Object, e As EventArgs) Handles tsClose.Click
        Me.Close() ' Closes the current form, which exits the application
    End Sub

    Private Sub frmMain_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        labelConnected.Text = "Not Connected" ' Initialize connection status
    End Sub

    Private Sub btn_Click(sender As Object, e As EventArgs) Handles btn.Click
        Try
            ' Open the folder where log files are stored
            Process.Start(Logs.Logger.LogFolderPath)
        Catch ex As Exception
            MessageBox.Show("Could not open log folder: " & ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Logs.Logger.LogError("Failed to open log folder: " & ex.Message, ex)
        End Try
    End Sub

    Private Sub btnViewLogs_Click(sender As Object, e As EventArgs) Handles btnViewLogs.Click
        Try
            Dim dbPath As String = textboxSearch.Text
            ' Validate if a database path has been selected
            If String.IsNullOrEmpty(dbPath) Then
                MessageBox.Show("Please select a database first to determine backup folder location.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information)
                Return
            End If
            ' Construct the path to the backup folder
            Dim backupFolderPath As String = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(dbPath), "Backup")
            ' Use Process.Start to open the folder in File Explorer
            Process.Start(backupFolderPath)
        Catch ex As Exception
            MessageBox.Show("Could not open backup folder: " & ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Logs.Logger.LogError("Failed to open backup folder: " & ex.Message, ex)
        End Try
    End Sub

End Class